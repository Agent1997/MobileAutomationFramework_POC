package com.rommelmalked.qa.automation.mobile_automation.mobile_automation_poc.framework.server;

import com.rommelmalked.qa.automation.mobile_automation.mobile_automation_poc.framework.utilities.Utils;
import io.appium.java_client.service.local.AppiumDriverLocalService;
import io.appium.java_client.service.local.AppiumServiceBuilder;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;


/**
 * This is to simplify initializing appium server
 * by creating easily understandable functions.
 * <p>
 * Note: If you want to disable logging on console and log to a file instead.
 * Make sure to call redirectLogTo before starting the server.
 *
 * @author Agent1997
 */

public class AppiumServer {
    private AppiumServiceBuilder serviceBuilder = new AppiumServiceBuilder();
    private AppiumDriverLocalService server;
    private int port;

    /***
     *This default constructor will use the port randomly generated by Utils.getAvailablePort
     */

    public AppiumServer() {
        this.port = Utils.getAvailablePort();
        this.serviceBuilder.usingPort(port);
        this.server = AppiumDriverLocalService.buildService(serviceBuilder);
    }

    public AppiumServer(int port) {
        this.port = port;
        this.serviceBuilder.usingPort(port);
        this.server = AppiumDriverLocalService.buildService(serviceBuilder);
    }

    public AppiumServer startServer() {
        this.server.start();
        return this;
    }

    public void stopServer() {
        this.server.stop();
    }

    public boolean isRunning() {
        return this.server.isRunning();
    }

    public AppiumServiceBuilder getServiceBuilder() {
        return this.serviceBuilder;
    }

    public AppiumDriverLocalService getServer() {
        return this.server;
    }

    private void redirectLogTo(String folderName, String fileName, AppiumDriverLocalService server) {
        server.clearOutPutStreams();
        File directory = new File(Utils.getProjectDirectory() + folderName);

        if (!directory.exists()) {
            directory.mkdir();
        }

        try {
            server.addOutPutStream(new FileOutputStream(Utils.getProjectDirectory() + folderName + Utils.generateFileName(fileName)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public AppiumServer redirectLogTo(String filename) {
        redirectLogTo("appiumLogs", filename, this.server);
        return this;
    }
}
