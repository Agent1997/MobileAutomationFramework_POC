package com.rommelmalked.qa.automation.mobile_automation.mobile_automation_poc.framework.server;

import com.rommelmalked.qa.automation.mobile_automation.mobile_automation_poc.framework.utilities.Utils;
import io.appium.java_client.service.local.AppiumDriverLocalService;
import io.appium.java_client.service.local.AppiumServiceBuilder;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;


/**
 * This is to simplify initializing appium server
 * by creating easily understandable functions.
 *
 * @author Agent1997
 */

/*
TODO Find a way to redirect log on a file then disable logging on console
 */

public class AppiumServer {
    private AppiumServiceBuilder serviceBuilder = new AppiumServiceBuilder();
    private AppiumDriverLocalService server;
    private int port;

    /***
     *This default constructor will use the port randomly generated by Utils.getAvailablePort
     */
    public AppiumServer() {
        this.port = Utils.getAvailablePort();
        this.serviceBuilder.usingPort(port);
        this.server = AppiumDriverLocalService.buildService(serviceBuilder);
        redirectLogTo("appiumLogs","Test", this.server);
    }

    public AppiumServer(int port) {
        this.port = port;
        this.serviceBuilder.usingPort(port);
        this.server = AppiumDriverLocalService.buildService(serviceBuilder);
        redirectLogTo("appiumLogs", "Test", this.server);

    }

    public void startServer() {
        this.server.start();
    }

    public void stopServer() {
        this.server.stop();
    }

    public boolean isRunning() {
        return this.server.isRunning();
    }

    public AppiumServiceBuilder getServiceBuilder() {
        return this.serviceBuilder;
    }

    public AppiumDriverLocalService getServer() {
        return this.server;
    }

    private void redirectLogTo(String folderName, String fileName, AppiumDriverLocalService server) {
        server.clearOutPutStreams();
        try {
            server.addOutPutStream(new FileOutputStream(Utils.getProjectDirectory() + folderName + Utils.generateFileName(fileName)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
